namespace System
{
    public static class Reflection
    {
        private static var dll;

        public static function Reflection()
        {
            dll = "msl_reflection.dll";
            Dll.LoadLibrary(dll);
        }

        public static function GetType(object)
        {
            return Dll.Call(dll, "GetType", object);
        }

        public static function CreateInstance(type, args)
        {
            return Dll.Call(dll, "CreateInstance", type, args);
        }

        public static function Invoke(object, method, args)
        {
            return Dll.Call(dll, "Invoke", object, method, args);
        }

        public static function ContainsMethod(object, method, argCount)
        {
            return Dll.Call(dll, "ContainsMethod", object, method, argCount);
        }

        public static function GetNamespace(name)
        {
            return Dll.Call(dll, "GetNamespace", name);
        }

        public static function GetMember(parent, child)
        {
            return Dll.Call(dll, "GetMember", parent, child);
        }

        public static function IsNamespaceExists(name)
        {
            return Dll.Call(dll, "IsNamespaceExists", name);
        }

        public static function ContainsMember(object, member)
        {
            return Dll.Call(dll, "ContainsMember", object, member);
        }
    }

    public static class GC
    {
        private static var dll;

        public static function GC()
        {
            dll = "msl_gc.dll";
            Dll.LoadLibrary(dll);
        }

        public static function Collect()
        {
            return Dll.Call(dll, "Collect");
        }

        public static function Disable()
        {
            return Dll.Call(dll, "Disable");
        }

        public static function Enable()
        {
            return Dll.Call(dll, "Enable");
        }

        public static function ReleaseMemory()
        {
            return Dll.Call(dll, "ReleaseMemory");
        }

        public static function SetMinimalMemory(value)
        {
            return Dll.Call(dll, "SetMinimalMemory", value);
        }

        public static function SetMaximalMemory(value)
        {
            return Dll.Call(dll, "SetMaximalMemory", value);
        }

        public static function SetLogPermissions(value)
        {
            return Dll.Call(dll, "SetLogPermissions", value);
        }
    }

    public static class Console
    {
        private static var dll;

        public static function Console()
        {
            dll = "msl_console.dll";
            Dll.LoadLibrary(dll);
        }

        public static function Print(object)
        {
            if (Reflection.ContainsMethod(object, "ToString", 0))
                object = object.ToString();
            return Dll.Call(dll, "Print", object);
        }

        public static function PrintLine(object)
        {
            if (Reflection.ContainsMethod(object, "ToString", 0))
                object = object.ToString();
            return Dll.Call(dll, "PrintLine", object);
        }

        public static function Read()
        {
            return Dll.Call(dll, "Read");
        }

        public static function ReadLine()
        {
            return Dll.Call(dll, "ReadLine");
        }

        public static function ReadBool()
        {
            return Dll.Call(dll, "ReadBool");
        }

        public static function ReadFloat()
        {
            return Dll.Call(dll, "ReadFloat");
        }

        public static function ReadInt()
        {
            return Dll.Call(dll, "ReadInt");
        }
    }

    public static class Math
    {
        private static var dll;

        public static function Math()
        {
            dll = "msl_math.dll";
            Dll.LoadLibrary(dll);
        }

        public static function Sqrt(value)
        {
            return Dll.Call(dll, "FloatSqrt", 1.0 * value);
        }

        public static function Abs(value)
        {
            return Dll.Call(dll, "FloatAbs", 1.0 * value);
        }

        public static function Sin(value)
        {
            return Dll.Call(dll, "FloatSin", 1.0 * value);
        }

        public static function Cos(value)
        {
            return Dll.Call(dll, "FloatCos", 1.0 * value);
        }

        public static function Tan(value)
        {
            return Dll.Call(dll, "FloatTan", 1.0 * value);
        }

        public static function Exp(value)
        {
            return Dll.Call(dll, "FloatExp", 1.0 * value);
        }

        public static function Asin(value)
        {
            return Dll.Call(dll, "FloatAsin", 1.0 * value);
        }

        public static function Acos(value)
        {
            return Dll.Call(dll, "FloatAcos", 1.0 * value);
        }

        public static function Atan(value)
        {
            return Dll.Call(dll, "FloatAtan", 1.0 * value);
        }

        public static function Log10(value)
        {
            return Dll.Call(dll, "FloatLog10", 1.0 * value);
        }

        public static function Log2(value)
        {
            return Dll.Call(dll, "FloatLog2", 1.0 * value);
        }

        public static function Log(value)
        {
            return Dll.Call(dll, "FloatLog", 1.0 * value);
        }
    }
}